//Serialize and deserialize a binary tree

import java.io.*;
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG {

    static Node buildTree(String str) {
        if(str.length() == 0 || str.charAt(0) == 'N') {
            return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;

        while(queue.size() > 0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;

            if(i >= ip.length)
              break;

            currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }

    static void deletetree(Node root) {
        if(root == null)
          return;

        deletetree(root.left);
        deletetree(root.right);
        root.left = null;
        root.right = null;
    }

    static void printInorder(Node root) {
        if(root == null)
          return;

        printInorder(root.left);
        System.out.print(root.data + " ");
        printInorder(root.right);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());

        while(t-- > 0) {
            String s = br.readLine();
            Node root = buildTree(s);
            Tree tr = new Tree();
            ArrayList<Integer> A = tr.serialize(root);
            deletetree(root);
            root = null;
            Node getRoot = tr.deSerialize(A);
            printInorder(getRoot);
            System.out.println();
        }
    }
}

class Tree{
    int data;
    Tree left,right;

    Tree(int d) {
        data = d;
        left = right = null;
    }
}

class Tree {
    ArrayList<Integer> al;
    int index;

    public ArrayList<Integer> serialize(Node root) {
        al = new  ArrayList<Integer>();
        func(root);
        
        return al;
    }
    
    void func(Node root){
        if(root == null) {
            al.add(-1);
            return;
        }
        
        al.add(root.data);
        func(root.left);
        func(root.right);
    }

    public Node deSerialize(ArrayList<Integer> A) {
        index = 0;
        
        return dfs(A);
    }
    
    Node dfs(ArrayList<Integer> A) {
        if(index == A.size()) {
            return null;
        }
        
        int val = A.get(index);
        index++;
        
        if(val == -1) {
            return null;
        }
        
        Node root = new Node(val);
        root.left = dfs(A);
        root.right = dfs(A);
        
        return root;
    }
};
