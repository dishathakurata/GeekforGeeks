//Vertical sum

import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG {
    
    static Node buildTree(String str){
        if(str.length() == 0 || str.charAt(0) == 'N') {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        queue.add(root);
        int i = 1;

        while(queue.size() > 0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;

            if(i >= ip.length)
                break;
                
            currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    
	public static void main (String[] args) throws IOException{
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        int t=Integer.parseInt(br.readLine());
    
	        while(t > 0) {
	            String s = br.readLine();

    	    Node root = buildTree(s);
        	Solution g = new Solution();
			    ArrayList<Integer> res = g.verticalSum(root);

			    for (Integer num : res)
            System.out.print (num + " ");

			    System.out.println();
          t--;       
        }
    }
}

class Node{
  int data;
  Node left, right;
  
  Node(int item) {
    data = item;
    left = right = null
  }
}

class Solution {
    ArrayList<Integer> al;
    
    public ArrayList <Integer> verticalSum(Node root) {
        al = new  ArrayList <Integer>();
        TreeMap<Integer, Integer> map = new TreeMap<>();
        vSum(root, 0, map);
        
        for(int value : map.values()) {
            al.add(value);
        }
        
        return al;
        
    }
    
    void vSum(Node root, int hd, TreeMap<Integer, Integer> map) {
        if(root==null) {
            return;
        }
        
        vSum(root.left, hd - 1, map);
        map.put(hd, map.getOrDefault(hd, 0) + root.data);
        vSum(root.right, hd + 1, map);
    }
}
