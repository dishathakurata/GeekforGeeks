//Minimize the difference

import java.io.*;
import java.util.*;

class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while(t-- > 0){
            int n = Integer.parseInt(br.readLine());
            int k = Integer.parseInt(br.readLine());
            int[] arr = IntArray.input(br, n);
            Solution obj = new Solution();
            int res = obj.minimizeDifference(n, k, arr);
            System.out.println(res);
        }
    }
}

class Solution {
    public static int minimizeDifference(int n, int k, int[] arr) {
        int rightmax[] = new int[n];
        int rightmin[] = new int[n];
        rightmax[n - 1] = arr[n - 1];
        rightmin[n - 1] = arr[n - 1];
        
        for(int i = n - 2; i >= 0; i--) {
            rightmin[i] = Math.min(rightmin[i + 1], arr[i]);
            rightmax[i] = Math.max(rightmax[i + 1], arr[i]);
        }
        
        int i = 0, j = k - 1, min = Integer.MAX_VALUE, max = Integer.MIN_VALUE, ans = Integer.MAX_VALUE;
        
        while(j < n) {
            if(i != 0) {
                min = Math.min(arr[i - 1], min);
                max = Math.max(arr[i - 1], max);
            }
            
            int temp1 = max, temp2 = min;
            
            if(j != n - 1) {
                temp1 = Math.max(max, rightmax[j + 1]);
                temp2 = Math.min(min, rightmin[j + 1]);
            }
            
            ans = Math.min(ans, Math.abs(temp1 - temp2));
            i++;
            j++;
        }
        
        return ans;
    }
}
