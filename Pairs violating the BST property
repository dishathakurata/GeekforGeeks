//Pairs violating the BST property

import java.io.*;
import java.util.*;

class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }

    public static Node buildTree(String str) {
        if(str.length() == 0 || str.charAt(0) == 'N') {
          return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;

        while (queue.size() > 0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;

            if(i >= ip.length) {
              break;
            }

            currVal = ip[i];

            if(!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }

    public static Node inputTree(BufferedReader br) throws IOException {
        return buildTree(br.readLine().trim());
    }

    public static void inorder(Node root) {
        if(root == null) {
          return;
        }

        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0) {
            int n;
            n = Integer.parseInt(br.readLine());
            Node root = Node.inputTree(br);
            Solution obj = new Solution();
            int res = obj.pairsViolatingBST(n, root);
            System.out.println(res);
        }
    }
}

class Node {
    int data;
    Node left;
    Node right;

    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {
    static int ans = 0;
    
    static void merge(int arr[], int low, int mid, int high) {
        int a = mid - low + 1;
        int b = high - mid;
        int arr1[] = new int[a];
        int arr2[] = new int[b];
        
        for(int i = 0; i < a; i++) {
            arr1[i]=arr[low + i];
        }
        
        for(int i = 0; i < b; i++) {
            arr2[i]=arr[mid + i + 1];
        }
        
        int i = 0, k = low, j = 0;
        
        while(i < a && j < b) {
            if(arr1[i] <= arr2[j]) {
                arr[k] = arr1[i];
                i++;
            }
            
            else {
                ans += a - i;
                arr[k] = arr2[j];
                j++;
            }
            
            k++;
        }
        
        while(i < a) {
            arr[k++] = arr1[i++];
        }
        
        while(j < b) {
            arr[k++] = arr2[j++];
        }
    }
    
    static void mergesort(int arr[], int low, int high){
        if(low >= high) {
            return;
        }
        
        int mid = (low + high) / 2;
        mergesort(arr, low, mid);
        mergesort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
    
    static void help(Node root, ArrayList<Integer> nodes) {
        if(root == null) {
            return;
        }
        
        help(root.left, nodes);
        nodes.add(root.data);
        help(root.right, nodes);
    }
    
    public static int pairsViolatingBST(int n, Node root) {
        ans=0;
        ArrayList<Integer> nodes = new ArrayList<>();
        help(root,nodes);
        int arr[] = new int[nodes.size()];
        for(int i=0;i<nodes.size();i++)arr[i]=nodes.get(i);
        mergesort(arr,0,n-1);
        return ans;
    }   
}
