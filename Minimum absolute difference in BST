//Minimum absolute difference in BST

import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GFG {

static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N') {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        queue.add(root);
        int i = 1;

        while(queue.size()>0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
                
            if(!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;

            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            if(!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }

            i++;
        }
        
        return root;
    }

  public static void main(String[] args) throws IOException {
    BufferedReader bu = new BufferedReader(new InputStreamReader(System.in));
    int T = Integer.parseInt(bu.readLine());
    while(T-- > 0) {
      String s=bu.readLine();
      Node root = buildTree(s);

      if(root == null)
        continue;

      if(root.left == null && root.right == null)
        continue;

      Solution obj = new Solution();
      int ans = obj.absolute_diff(root);
      System.out.println(ans);
    }
  }
}

struct Node {
    int data;
    Node *left;
    Node *right;
};

class Solution {
    
    Integer prev = null;
    int minDiff = Integer.MAX_VALUE;
    
    int absolute_diff(Node root) {
        if(root == null) {
            return minDiff;
        }

        absolute_diff(root.left);
        
        if(prev != null) {
            minDiff = Math.min(minDiff, Math.abs(root.data - prev));
        }
        
        prev = root.data;

        absolute_diff(root.right);

        return minDiff;
    }
}
