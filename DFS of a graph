//DFS of a graph

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());

        while(T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();

            for(int i = 0; i < V; i++) 
              adj.add(new ArrayList<Integer>());

            for(int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }

            Solution obj = new Solution();
            ArrayList<Integer> ans = obj.dfsOfGraph(V, adj);

            for(int i = 0; i < ans.size(); i++)
                System.out.print(ans.get(i) + " ");
            System.out.println();
        }
    }
}

class Solution {
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> dfs = new ArrayList<>();
        Stack<Integer> s = new Stack<>();
        boolean[] vis = new boolean[V];
        
        dfs.add(0);
        vis[0] = true;
        
        dfsHelper(0, dfs, vis, adj);
        
        return dfs;
    }
    
    public void dfsHelper(int n, ArrayList<Integer> dfs, boolean[]vis, ArrayList<ArrayList<Integer>> graph){
        ArrayList<Integer> nbrs = graph.get(n);
        
        for(int v : nbrs) {
            if(vis[v] == false) {
                dfs.add(v);
                vis[v] = true;
                dfsHelper(v, dfs, vis, graph);
            }
        }
    }
}
