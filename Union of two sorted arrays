//Union of two sorted arrays

import java.util.*;
import java.io.*;
import java.lang.*;

class Main {
    public static void main(String args[])throws IOException {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t  =Integer.parseInt(read.readLine());
        
        while(t-- > 0) {
            String st[] = read.readLine().trim().split(" ");
            int N = Integer.parseInt(st[0]);
            int M = Integer.parseInt(st[1]);
            int arr1[] = new int[N];
            int arr2[] = new int[M];
            
            st = read.readLine().trim().split(" ");

            for(int i = 0; i < N; i++)
              arr1[i] = Integer.parseInt(st[i]);
            
            st = read.readLine().trim().split(" ");

            for(int i = 0; i< M; i++)
              arr2[i] = Integer.parseInt(st[i]);
            
            Solution obj = new Solution();
            ArrayList<Integer> res = new ArrayList<Integer>();
            res = obj.findUnion(arr1, arr2, N, M);

            for(int i = 0;i<res.size();i++)
                System.out.print(res.get(i) + " ");
            System.out.println(); 
        }
    }
}

class Solution {

    //Solution 1
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m) {
        ArrayList<Integer> arr = new ArrayList<>();
        Set<Integer> set = new TreeSet<>();
        
        for(int x : arr1) {
            set.add(x);
        }
        
        for(int x : arr2) {
            set.add(x);
        }
        
        for(int x : set) {
            arr.add(x);
        }
        
        return arr;
    }

    //Solution 2
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < n; i++) {
            map.put(arr1[i], map.getOrDefault(arr1[i], 0) + 1);
        }
        
        for(int i = 0; i < m; i++) {
            map.put(arr2[i], map.getOrDefault(arr2[i], 0) + 1);
        }
        
        Set<Integer> keys = map.keySet();
        
        ArrayList<Integer> ans = new ArrayList<Integer>(keys);
        Collections.sort(ans);
        
        return ans;
    }
}
