//Delete node in doubly linked list

import java.util.*;

class Node {
	int data;
	Node next;
	Node prev;

	Node(int d) {
		data = d;
		next = prev = null;
	}
}

class Delete_Node_From_DLL {
	Node head;
	Node tail;
	
	void addToTheLast(Node node) {
		if(head ==  null) {
			head = node;
			tail = node;
		}

		else {
			tail.next = node;
			tail.next.prev = tail;
			tail = tail.next;
		}
	}
	
	void printList(Node head) {
    Node temp = head;

		while(temp != null) {
			System.out.print(temp.data + " ");
			temp =  temp.next;
		}
		System.out.println();
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();

		while(t > 0) {
			int n = sc.nextInt();
			Delete_Node_From_DLL list = new Delete_Node_From_DLL();
			int a1 = sc.nextInt();
			Node head = new Node(a1);
			list.addToTheLast(head);
			
			for(int i = 1; i < n; i++) {
				int a = sc.nextInt();
				list.addToTheLast(new Node(a));
			}

			a1 = sc.nextInt();
			Solution g = new Solution();
			Node ptr = g.deleteNode(list.head, a1);
			list.printList(ptr);
			t--;
		}
	}
}

class Node {
	int data;
	Node next;
	Node prev;

	Node(int d) {
		data = d;
		next = prev = null;
	}
}

class Solution {
    Node deleteNode(Node head, int x) {
	    Node curr = head;
	    int count = 0;
	    
	    while(curr != null) {
	        count++;
	        
	        if(count == x) {
	            break;
	        }
	        
	        curr = curr.next;
	    }
	    
	    Node back = curr.prev;
	    Node front = curr.next;
	    
	    if(back == null && front == null) {
	        return null;
	    }
	    
	    else if(back == null) {
	        Node temp = head;
	        head = head.next;
	        temp.next = null;
	    }
	    
	    else if(front == null) {
	        back.next = null;
	        curr.prev = null;
	    }
	    
	    else {
	        back.next = front;
	        front.prev = back;
	        
	        curr.prev = null;
	        curr.next = null;
	    }
	    
	    return head;
    }
}
