//Merge sort on doubly linked list

import java.io.*;
import java.util.*;

class Node {
    int data;
    Node next, prev;

    Node(int key) {
        data = key;
        next = prev = null;
    }
}

class Driverclass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while(t-- > 0) {
            int n = sc.nextInt();
            int a1 = sc.nextInt();
            Node head = new Node(a1);
            Node temp = head;

            for(int i = 1; i < n; i++) {
                int a = sc.nextInt();
                Node n1 = new Node(a);
                n1.prev = temp;
                temp.next = n1;
                temp = n1;
            }

            head = new Solution().sortDoubly(head);
            printList(head);
        }
    }

    public static void printList(Node node) {
        Node temp = node;

        while(node != null) {
            System.out.print(node.data + " ");
            temp = node;
            node = node.next;
        }
        System.out.println();

        while(temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }
}

class Node {
    int data;
    Node next, prev;
    Node(int data) {
        this.data = data;
        next = prev = null;
    }
}

class Solution {
    static Node sortDoubly(Node head) {
        if(head == null || head.next == null) {
            return head;
        }

        Node head2 = funsplit(head);
        head = sortDoubly(head);
        head2 = sortDoubly(head2);
        
        return merge(head, head2);
    }
    
    static Node funsplit(Node head) {
        Node fast = head, slow = head;
        
        while(fast.next != null && fast.next.next != null) {
            slow = slow.next; fast = fast.next.next;
        }
        
        Node temp = slow.next; slow.next=null;
        
        return temp;
     }
     
    static Node merge(Node head, Node head2){
        Node dummy = new Node(-1);
        Node curr = dummy;
        
        while(head != null && head2 != null){
            if(head.data < head2.data) {
                curr.next = head;
                head.prev = curr;
                head = head.next;
            }
            
            else {
                curr.next = head2;
                head2.prev = curr;
                head2 = head2.next;
            }
            
            curr=curr.next;
        }
 
        if(head != null) {
            curr.next = head;
            head.prev =curr;
        }
        
        if(head2 != null) {
            curr.next = head2;
            head2.prev=  curr;
        }
        
        Node ans = dummy.next;
        ans.prev = null;
        
        return ans;
    }
}
